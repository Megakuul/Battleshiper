AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  ApplicationDomain:
    Type: String
    Description: "Domain used for the battleshiper deployment."
  ApplicationDomainCertificateArn:
    Type: String
    Description: "ARN of the ACM certificate for the ApplicationDomain."
  GithubOAuthClientCredentialArn:
    Type: String
    Description: "ARN of the Secret containing Github Application App ID, App Secret Key, Client ID & Client Secret ('app_id', 'app_secret', 'client_id' & 'client_secret')."


Globals:
  Function:
    Timeout: 5
    MemorySize: 128

Resources:

  # Using ugly separator comments because cloudformation is dogwater:
  # ============================================
  # =========== Network ========================
  # ============================================

  BattleshiperVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.100.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true

  BattleshiperVPCInternetGateway:
    Type: AWS::EC2::InternetGateway

  BattleshiperVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref BattleshiperVPCInternetGateway
      VpcId: !Ref BattleshiperVPC


  BattleshiperApiSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BattleshiperVPC

  BattleshiperApiSubnetInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref BattleshiperApiSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref BattleshiperVPCInternetGateway
  
  BattleshiperApiSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperVPC
      CidrBlock: "10.100.10.0/24"
      AvailabilityZone: !Select [0, Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperApiSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BattleshiperApiSubnet1
      RouteTableId: !Ref BattleshiperApiSubnetRouteTable

  BattleshiperApiSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperVPC
      CidrBlock: "10.100.20.0/24"
      AvailabilityZone: !Select [1, Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperApiSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BattleshiperApiSubnet2
      RouteTableId: !Ref BattleshiperApiSubnetRouteTable

  BattleshiperApiSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperVPC
      CidrBlock: "10.100.30.0/24"
      AvailabilityZone: !Select [2, Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperApiSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BattleshiperApiSubnet3
      RouteTableId: !Ref BattleshiperApiSubnetRouteTable


  BattleshiperPipelineSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BattleshiperVPC

  BattleshiperPipelineSubnetInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref BattleshiperPipelineSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref BattleshiperVPCInternetGateway

  BattleshiperPipelineSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperVPC
      CidrBlock: "10.100.210.0/24"
      AvailabilityZone: !Select [0, Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperPipelineSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BattleshiperPipelineSubnet1
      RouteTableId: !Ref BattleshiperPipelineSubnetRouteTable

  BattleshiperPipelineSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperVPC
      CidrBlock: "10.100.220.0/24"
      AvailabilityZone: !Select [1, Fn::GetAZs !Ref "AWS::Region"]
      
  BattleshiperPipelineSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BattleshiperPipelineSubnet2
      RouteTableId: !Ref BattleshiperPipelineSubnetRouteTable

  BattleshiperPipelineSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperVPC
      CidrBlock: "10.100.230.0/24"
      AvailabilityZone: !Select [2, Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperPipelineSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BattleshiperPipelineSubnet3
      RouteTableId: !Ref BattleshiperPipelineSubnetRouteTable


  BattleshiperDbSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperVPC
      CidrBlock: "10.100.110.0/24"
      AvailabilityZone: !Select [0, Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperDbSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperVPC
      CidrBlock: "10.100.120.0/24"
      AvailabilityZone: !Select [1, Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperDbSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperVPC
      CidrBlock: "10.100.130.0/24"
      AvailabilityZone: !Select [2, Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperDbReceiverGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "battleshiper-db-receiver"
      GroupDescription: "Allows access to DocumentDB with group battleshiper-db-access"
      VpcId: !Ref BattleshiperVPC

  BattleshiperDbAccessGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "battleshiper-db-access"
      GroupDescription: "Allows DocumentDB access from battleshiper-db-receiver"
      VpcId: !Ref BattleshiperVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          DestinationSecurityGroupId: !GetAtt BattleshiperDbReceiverGroup.GroupId

  BattleshiperApiEgressGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "battleshiper-api-egress"
      GroupDescription: "Allows HTTPS egress traffic"
      VpcId: !Ref BattleshiperVPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  BattleshiperPipelineEgressGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "battleshiper-pipeline-egress"
      GroupDescription: "Allows HTTPS egress traffic"
      VpcId: !Ref BattleshiperVPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0


  BattleshiperBuildVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.120.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true

  BattleshiperBuildVPCInternetGateway:
    Type: AWS::EC2::InternetGateway

  BattleshiperBuildVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref BattleshiperBuildVPCInternetGateway
      VpcId: !Ref BattleshiperBuildVPC


  BattleshiperBuildSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BattleshiperBuildVPC

  BattleshiperBuildSubnetInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref BattleshiperBuildSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref BattleshiperBuildVPCInternetGateway

  BattleshiperBuildSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperBuildVPC
      CidrBlock: "10.120.110.0/24"
      AvailabilityZone: !Select [0, Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperBuildSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BattleshiperBuildSubnet1
      RouteTableId: !Ref BattleshiperBuildSubnetRouteTable

  BattleshiperBuildSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperBuildVPC
      CidrBlock: "10.120.120.0/24"
      AvailabilityZone: !Select [1, Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperBuildSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BattleshiperBuildSubnet2
      RouteTableId: !Ref BattleshiperBuildSubnetRouteTable

  BattleshiperBuildSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperBuildVPC
      CidrBlock: "10.120.130.0/24"
      AvailabilityZone: !Select [2, Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperBuildSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BattleshiperBuildSubnet3
      RouteTableId: !Ref BattleshiperBuildSubnetRouteTable


  # ============================================
  # =========== Database =======================
  # ============================================

  BattleshiperDbAdminSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "battleshiper-db-cluster-admin-credentials"
      Description: "Secret for battleshiper db administrator credentials."
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        PasswordLength: 60
        ExcludeCharacters: '"@/\\'

  BattleshiperDbApiSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "battleshiper-db-cluster-api-credentials"
      Description: "Secret for battleshiper api access credentials."
      GenerateSecretString:
        SecretStringTemplate: '{"username": "api"}'
        GenerateStringKey: "password"
        PasswordLength: 40
        ExcludeCharacters: '"@/\\'

  BattleshiperDbApiSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref BattleshiperDbApiSecret
      TargetId: !Ref BattleshiperDb
      TargetType: "AWS::DocDB::DBCluster"

  BattleshiperDbApiSecretPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "battleshiper-db-cluster-api-credentials-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource:
              - !Ref BattleshiperDbApiSecret
      Roles: 
        - !Ref BattleshiperUserFuncRole
        - !Ref BattleshiperAdminFuncRole
        - !Ref BattleshiperResourceFuncRole
        - !Ref BattleshiperPipelineFuncRole

  BattleshiperDb:
    Type: AWS::DocDBElastic::Cluster
    Properties:
      AdminUserName: !Sub '{{resolve:secretsmanager:BattleshiperDbAdminSecret:SecretString:username}}'
      # Admin password is set to the secret's ARN.
      # This usage is not documented unfortunaly: https://github.com/aws/aws-cdk/issues/28935.
      AdminUserPassword: !Ref BattleshiperDbAdminSecret
      AuthType: "SECRET_ARN"
      ClusterName: "battleshiper-db-cluster"
      ShardCapacity: 2
      ShardCount: 1
      ShardInstanceCount: 3
      SubnetIds: 
        - !Ref BattleshiperDbSubnet1
        - !Ref BattleshiperDbSubnet2
        - !Ref BattleshiperDbSubnet3
      VpcSecurityGroupIds:
        - !Ref BattleshiperDbAccessGroup


  # ============================================
  # =========== CloudWatch Logging =============
  # ============================================

  BattleshiperApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/battleshiper-api-logs
      LogGroupClass: INFREQUENT_ACCESS
      RetentionInDays: 14

  BattleshiperApiLogGroupPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "battleshiper-api-logs-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:DescribeLogStreams"
              - "logs:GetLogEvents"
            Resources:
              - !GetAtt BattleshiperApiLogGroup.Arn
      Roles:
        - !Ref BattleshiperAdminFuncRole

  BattleshiperPipelineProjectEventLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "battleshiper-pipeline-project-event-log-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:DescribeLogStreams"
              - "logs:GetLogEvents"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/battleshiper/project/event/*"
      Roles:
        - !Ref BattleshiperPipelineFuncRole
        - !Ref BattleshiperResourceFuncRole

  BattleshiperPipelineProjectBuildLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "battleshiper-pipeline-project-build-log-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:DescribeLogStreams"
              - "logs:GetLogEvents"
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/battleshiper/project/build/*"
      Roles:
        - !Ref BattleshiperResourceFuncRole

  BattleshiperPipelineProjectDeployLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "battleshiper-pipeline-project-deploy-log-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:DescribeLogStreams"
              - "logs:GetLogEvents"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/battleshiper/project/deploy/*"
      Roles:
        - !Ref BattleshiperPipelineDeployFuncRole
        - !Ref BattleshiperResourceFuncRole

  BattleshiperPipelineProjectServerLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "battleshiper-pipeline-project-server-log-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:DescribeLogStreams"
              - "logs:GetLogEvents"
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/battleshiper/project/server/*"
      Roles:
        - !Ref BattleshiperResourceFuncRole

  # ============================================
  # =========== Auth Secrets ===================
  # ============================================

  BattleshiperJwtCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "battleshiper-jwt-credentials"
      Description: "Battleshiper jwt secret used to sign and verify user tokens."
      GenerateSecretString:
        SecretStringTemplate: '{}'
        GenerateStringKey: "secret"
        PasswordLength: 40
        ExcludeCharacters: '"@/\\'

  BattleshiperJwtCredentialPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "battleshiper-jwt-credentials-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Ref BattleshiperJwtCredentials
      Roles:
        - !Ref BattleshiperAuthFuncRole
        - !Ref BattleshiperUserFuncRole
        - !Ref BattleshiperAdminFuncRole
        - !Ref BattleshiperResourceFuncRole
        - !Ref BattleshiperPipelineFuncRole

  BattleshiperGhClientCredentialPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "battleshiper-gh-client-credentials-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Ref GithubOAuthClientCredentialArn
      Roles:
        - !Ref BattleshiperAuthFuncRole
        - !Ref BattleshiperUserFuncRole
        - !Ref BattleshiperAdminFuncRole
        - !Ref BattleshiperResourceFuncRole
        - !Ref BattleshiperPipelineFuncRole

  # ============================================
  # =========== API ============================
  # ============================================

  BattleshiperApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: "battleshiper-api"


  BattleshiperAuthFuncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      # Policies are defined as separate policy objects and attached to the IAM role.

  BattleshiperAuthFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: api/auth
      Handler: auth
      Runtime: provided.al2023
      Architectures:
        - x86_64
      VpcConfig:
        SubnetIds:
          - !Ref BattleshiperApiSubnet1
          - !Ref BattleshiperApiSubnet2
          - !Ref BattleshiperApiSubnet3
        SecurityGroupIds:
          - !Ref BattleshiperApiEgressGroup
      Role: !GetAtt BattleshiperAuthFuncRole.Arn
      Events:
        Auth:
          Type: HttpApi
          Properties:
            Path: /api/auth/{proxy+}
            Method: ANY
            ApiId: !Ref BattleshiperApi
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          JWT_CREDENTIAL_ARN: !Ref BattleshiperJwtCredentials
          USER_TOKEN_TTL: 172800 # 2 days
          GITHUB_CLIENT_CREDENTIAL_ARN: !Ref GithubOAuthClientCredentialArn
          REDIRECT_URI: !Sub "https://${ApplicationDomain}/api/auth/callback"
          FRONTEND_REDIRECT_URI: "https://${ApplicationDomain}"
          DATABASE_ENDPOINT: !GetAtt BattleshiperDb.ClusterEndpoint
          DATABASE_NAME: "battleshiper"
          DATABASE_SECRET_ARN: !Ref BattleshiperDbApiSecret
      LoggingConfig:
        LogGroup: !Ref BattleshiperApiLogGroup 


  BattleshiperUserFuncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      # Policies are defined as separate policy objects and attached to the IAM role.

  BattleshiperUserFunc:
    Type: AWS::Serverless::Function
    # Function must depend on policies attached to the role
    # as described in docs: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html 
    DependsOn: 
      - BattleshiperDbApiSecretPolicy
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: api/user
      Handler: user
      Runtime: provided.al2023
      Architectures:
        - x86_64
      VpcConfig:
        SubnetIds:
          - !Ref BattleshiperApiSubnet1
          - !Ref BattleshiperApiSubnet2
          - !Ref BattleshiperApiSubnet3
        SecurityGroupIds:
          - !Ref BattleshiperDbReceiverGroup
          - !Ref BattleshiperApiEgressGroup
      Role: !GetAtt BattleshiperUserFuncRole.Arn
      Events:
        User:
          Type: HttpApi
          Properties:
            Path: /api/user/{proxy+}
            Method: ANY
            ApiId: !Ref BattleshiperApi
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          JWT_CREDENTIAL_ARN: !Ref BattleshiperJwtCredentials
          DATABASE_ENDPOINT: !GetAtt BattleshiperDb.ClusterEndpoint
          DATABASE_NAME: "battleshiper"
          DATABASE_SECRET_ARN: !Ref BattleshiperDbApiSecret
      LoggingConfig:
        LogGroup: !Ref BattleshiperApiLogGroup 


  BattleshiperAdminFuncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      # Policies are defined as separate policy objects and attached to the IAM role.

  BattleshiperAdminFunc:
    Type: AWS::Serverless::Function
    # Function must depend on policies attached to the role
    # as described in docs: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html 
    DependsOn: 
      - BattleshiperDbApiSecretPolicy
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: api/admin
      Handler: admin
      Runtime: provided.al2023
      Architectures:
        - x86_64
      VpcConfig:
        SubnetIds:
          - !Ref BattleshiperApiSubnet1
          - !Ref BattleshiperApiSubnet2
          - !Ref BattleshiperApiSubnet3
        SecurityGroupIds:
          - !Ref BattleshiperDbReceiverGroup
          - !Ref BattleshiperApiEgressGroup
      Role: !GetAtt BattleshiperAdminFuncRole.Arn
      Events:
        Admin:
          Type: HttpApi
          Properties:
            Path: /api/admin/{proxy+}
            Method: ANY
            ApiId: !Ref BattleshiperApi
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          JWT_CREDENTIAL_ARN: !Ref BattleshiperJwtCredentials
          DATABASE_ENDPOINT: !GetAtt BattleshiperDb.ClusterEndpoint
          DATABASE_NAME: "battleshiper"
          DATABASE_SECRET_ARN: !Ref BattleshiperDbApiSecret
          LOG_GROUP_NAME: !Ref BattleshiperApiLogGroup
      LoggingConfig:
        LogGroup: !Ref BattleshiperApiLogGroup 


  BattleshiperResourceFuncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      # Policies are defined as separate policy objects and attached to the IAM role.

  BattleshiperResourceFunc:
    Type: AWS::Serverless::Function
    # Function must depend on policies attached to the role
    # as described in docs: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html 
    DependsOn: 
      - BattleshiperDbApiSecretPolicy
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: api/resource
      Handler: resource
      Runtime: provided.al2023
      Architectures:
        - x86_64
      VpcConfig:
        SubnetIds:
          - !Ref BattleshiperApiSubnet1
          - !Ref BattleshiperApiSubnet2
          - !Ref BattleshiperApiSubnet3
        SecurityGroupIds:
          - !Ref BattleshiperDbReceiverGroup
          - !Ref BattleshiperApiEgressGroup
      Role: !GetAtt BattleshiperResourceFuncRole.Arn
      Events:
        Resource:
          Type: HttpApi
          Properties:
            Path: /api/resource/{proxy+}
            Method: ANY
            ApiId: !Ref BattleshiperApi
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          JWT_CREDENTIAL_ARN: !Ref BattleshiperJwtCredentials
          DATABASE_ENDPOINT: !GetAtt BattleshiperDb.ClusterEndpoint
          DATABASE_NAME: "battleshiper"
          DATABASE_SECRET_ARN: !Ref BattleshiperDbApiSecret
          TICKET_CREDENTIAL_ARN: !Ref BattleshiperPipelineTicketCredentials
          INIT_EVENTBUS_NAME: !Ref BattleshiperPipelineEventBus
          INIT_EVENT_SOURCE: "ch.megakuul.battleshiper"
          INIT_EVENT_ACTION: "battleshiper.init"
          INIT_EVENT_TICKET_TTL: 360
          BUILD_EVENTBUS_NAME: !Ref BattleshiperPipelineEventBus
          BUILD_EVENT_SOURCE: "ch.megakuul.battleshiper"
          BUILD_EVENT_ACTION: "battleshiper.build"
          # deployment ticket is used as parameter of the aws.batch event
          # https://docs.aws.amazon.com/batch/latest/userguide/batch_cwe_events.html
          DEPLOY_EVENT_SOURCE: "aws.batch"
          DEPLOY_EVENT_ACTION: "Batch Job State Change"
          DEPLOY_EVENT_TICKET_TTL: 1000
          CLOUDFRONT_CACHE_ARN: !GetAtt BattleshiperCDNRouteStore.Arn
      LoggingConfig:
        LogGroup: !Ref BattleshiperApiLogGroup 


  BattleshiperPipelineFuncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      # Policies are defined as separate policy objects and attached to the IAM role.

  BattleshiperPipelineFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: api/pipeline
      Handler: pipeline
      Runtime: provided.al2023
      Architectures:
        - x86_64
      VpcConfig:
        SubnetIds:
          - !Ref BattleshiperApiSubnet1
          - !Ref BattleshiperApiSubnet2
          - !Ref BattleshiperApiSubnet3
        SecurityGroupIds:
          - !Ref BattleshiperDbReceiverGroup
          - !Ref BattleshiperApiEgressGroup
      Role: !GetAtt BattleshiperPipelineFuncRole.Arn
      Events:
        Pipeline:
          Type: HttpApi
          Properties:
            Path: /api/pipeline/{proxy+}
            Method: ANY
            ApiId: !Ref BattleshiperApi
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          GITHUB_CLIENT_CREDENTIAL_ARN: !Ref GithubOAuthClientCredentialArn
          DATABASE_ENDPOINT: !GetAtt BattleshiperDb.ClusterEndpoint
          DATABASE_NAME: "battleshiper"
          DATABASE_SECRET_ARN: !Ref BattleshiperDbApiSecret
          TICKET_CREDENTIAL_ARN: !Ref BattleshiperPipelineTicketCredentials
          BUILD_EVENTBUS_NAME: !Ref BattleshiperPipelineEventBus
          BUILD_EVENT_SOURCE: "ch.megakuul.battleshiper"
          BUILD_EVENT_ACTION: "battleshiper.build"
          # deployment ticket is used as parameter of the aws.batch event
          # https://docs.aws.amazon.com/batch/latest/userguide/batch_cwe_events.html
          DEPLOY_EVENT_SOURCE: "aws.batch"
          DEPLOY_EVENT_ACTION: "Batch Job State Change"
          DEPLOY_EVENT_TICKET_TTL: 1000
      LoggingConfig:
        LogGroup: !Ref BattleshiperApiLogGroup 



  # ============================================
  # =========== Project S3 Storage =============
  # ============================================

  BattleshiperProjectStaticBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: "Name"
          Value: "battleshiper-static-bucket"

  BattleshiperProjectStaticBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BattleshiperProjectStaticBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Resource:
              - !Sub "${BattleshiperProjectStaticBucket.Arn}/*"
            Principal:
              Service: cloudfront.amazonaws.com

  BattleshiperProjectStaticBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "battleshiper-static-bucket-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "s3:HeadObject"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:PutObject"
              - "s3:DeleteObject"
            Effect: Allow
            Resource:
              - !Sub "${BattleshiperProjectStaticBucket.Arn}/*"
      Roles: 
        - !Ref BattleshiperPipelineDeployFuncRole
        - !Ref BattleshiperPipelineDeleteFuncRole


  BattleshiperProjectBuildAssetBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: "Name"
          Value: "battleshiper-build-asset-bucket"
      LifecycleConfiguration:
        Rules:
          - Id: "delete-assets"
            Status: "Enabled"
            ExpirationInDays: 1
            Prefix: ""
  
  BattleshiperProjectBuildAssetBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "battleshiper-build-asset-bucket-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "s3:HeadObject"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:PutObject"
              - "s3:DeleteObject"
            Effect: Allow
            Resource:
              - !Sub "${BattleshiperProjectBuildAssetBucket.Arn}/*"
      Roles:
        - !Ref BattleshiperPipelineDeployFuncRole
        - !Ref BattleshiperPipelineDeleteFuncRole


  # ============================================
  # =========== Project API Gateway ============
  # ============================================

  # TODO: Add permission to the staticBucket for the api gateway (s3:GetObject)

  BattleshiperProjectApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: "battleshiper-project-api"
      ProtocolType: HTTP

  BattleshiperProjectApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref BattleshiperProjectApi
      StageName: "$default"
      AutoDeploy: true

  # ============================================
  # =========== CDN Proxy ======================
  # ============================================

  BattleshiperCDNWebCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: "battleshiper-web-cache-policy"
        DefaultTTL: 86400 # 1 day
        MinTTL: 1 # 1 second
        MaxTTL: 31536000 # 1 year
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: "none"
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  BattleshiperCDNApiCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: "battleshiper-api-cache-policy"
        DefaultTTL: 0
        MinTTL: 0
        MaxTTL: 0
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: "none"
          EnableAcceptEncodingBrotli: false
          EnableAcceptEncodingGzip: false
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  BattleshiperCDNApiOriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        Name: "battleshiper-api-origin-policy"
        CookiesConfig:
          CookieBehavior: all
        HeadersConfig:
          HeaderBehavior: allExcept
          Headers:
            - host # exclude host implicitly tells cloudfront to replace it with the api gateway origin host
        QueryStringsConfig:
          QueryStringBehavior: all

  BattleshiperCDNRouteStore:
    Type: AWS::CloudFront::KeyValueStore
    Properties:
      Name: "battleshiper-cdn-route-store"
      Comment: "Store used to lookup the path based on the requested host or prerendered pages."

  BattleshiperCDNRouteStorePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "battleshiper-cdn-route-store-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "cloudfront-keyvaluestore:DescribeKeyValueStore"
              - "cloudfront-keyvaluestore:UpdateKeys"
              - "cloudfront-keyvaluestore:PutKey"
            Resource: !GetAtt BattleshiperCDNRouteStore.Arn
      Roles:
        - !Ref BattleshiperResourceFuncRole
        - !Ref BattleshiperPipelineDeployFuncRole

  BattleshiperCDNRouteFunc:
    Type: AWS::CloudFront::Function
    Properties:
      Name: "battleshiper-cdn-route-func"
      AutoPublish: true
      FunctionConfig:
        Comment: "Function to route cdn requests to a path based on the requested host and to add .html extension on prerendered pages."
        Runtime: cloudfront-js-2.0
        KeyValueStoreAssociations:
          - KeyValueStoreARN: !GetAtt BattleshiperCDNRouteStore.Arn
      FunctionCode: !Sub |
        import cf from "cloudfront";

        const kvsHandle = cf.kvs("${BattleshiperCDNRouteStore.Id}");

        const domainSuffix = ".${ApplicationDomain}";

        async function handler(event) {
          let request = event.request;

          try {
            const authorityHeader = request.headers[":authority"];
            const hostHeader = request.headers["host"];
            
            // extract host (prefer :authority if present)
            const host = authorityHeader ? authorityHeader.value : hostHeader.value;
            if (!host) {
              throw new Error("no host specified");
            }

            // remove the application domain from the host
            if (!host.endsWith(domainSuffix)) {
              throw new Error("unexpected host");
            }
            const alias = host.slice(0, -domainSuffix.length);

            const pathSegments = request.uri.split('/');
            
            const project = await kvsHandle.get(alias, { format: "string" });
            pathSegments.splice(1, 0, project); // set the project as first segment in the uri
            
            request.uri = pathSegments.join('/');

            const prerenderedPage = await kvsHandle.get(request.uri, { format: "string" }).catch(() => null);
            if (prerenderedPage) {
              request.uri = prerenderedPage;
            }

            return request;
          } catch (err) {
            request.uri = "/404.html";
            request.querystring = `error=${err.message}`;
            return request;
          }
        }

  BattleshiperCDNOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: "battleshiper-cdn-origin-access"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  BattleshiperCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        PriceClass: "PriceClass_All"
        ViewerCertificate:
          AcmCertificateArn: !Ref ApplicationDomainCertificateArn
          SslSupportMethod: "sni-only"
          MinimumProtocolVersion: "TLSv1.2_2021"
        Origins:
          - Id: "battleshiper-project-static-bucket"
            DomainName: !GetAtt BattleshiperProjectStaticBucket.DomainName
            OriginAccessControlId: !GetAtt BattleshiperCDNOriginAccessControl.Id
            S3OriginConfig: {}
          - Id: "battleshiper-api"
            DomainName: !GetAtt BattleshiperApi.ApiEndpoint
            CustomOriginConfig:
              OriginProtocolPolicy: "https-only"
          - Id: "battleshiper-project-api"
            DomainName: !GetAtt BattleshiperProjectApi.ApiEndpoint
            CustomOriginConfig:
              OriginProtocolPolicy: "https-only"
        DefaultCacheBehavior:
          TargetOriginId: "battleshiper-project-api"
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: !Ref BattleshiperCDNApiCachePolicy
          OriginRequestPolicyId: !Ref BattleshiperCDNApiOriginRequestPolicy
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt BattleshiperCDNRouteFunc.FunctionMetadata.FunctionARN

        CacheBehaviors:
          - PathPattern: "/api/*"
            TargetOriginId: "battleshiper-api"
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            Compress: false
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: !Ref BattleshiperCDNApiCachePolicy
            OriginRequestPolicyId: !Ref BattleshiperCDNApiOriginRequestPolicy

          - PathPattern: "/_app/*"
            TargetOriginId: "battleshiper-project-static-bucket"
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: !Ref BattleshiperCDNWebCachePolicy
            FunctionAssociations:
              - EventType: viewer-request
                FunctionARN: !GetAtt BattleshiperCDNRouteFunc.FunctionMetadata.FunctionARN

          - PathPattern: "/*.*"
            TargetOriginId: "battleshiper-project-static-bucket"
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: !Ref BattleshiperCDNWebCachePolicy
            FunctionAssociations:
              - EventType: viewer-request
                FunctionARN: !GetAtt BattleshiperCDNRouteFunc.FunctionMetadata.FunctionARN

        Aliases:
          - !Sub "*.${ApplicationDomain}"
      Tags:
        - Key: "Name"
          Value: "battleshiper-cdn"

  # ============================================
  # ======= Pipeline Ticket Credentials ========
  # ============================================

  BattleshiperPipelineTicketCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "battleshiper-pipeline-ticket-credentials"
      Description: "Battleshiper pipeline ticket secret used to sign and verify pipeline tickets."
      GenerateSecretString:
        SecretStringTemplate: '{}'
        GenerateStringKey: "secret"
        PasswordLength: 40
        ExcludeCharacters: '"@/\\'

  BattleshiperPipelineTicketCredentialPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "battleshiper-pipeline-ticket-credentials-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Ref BattleshiperPipelineTicketCredentials
      Roles:
        - !Ref BattleshiperResourceFuncRole
        - !Ref BattleshiperPipelineFuncRole
        - !Ref BattleshiperPipelineDeployFuncRole
        - !Ref BattleshiperPipelineInitFuncRole


  # ============================================
  # =========== Pipeline =======================
  # ============================================


  BattleshiperPipelineCloudformationServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
              Action:
                "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSLambdaFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AWSBatchFullAccess
        - arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator


  BattleshiperPipelineEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: "battleshiper-pipeline-eventbus"

  BattleshiperPipelineEventBusPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "battleshiper-pipeline-eventbus-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "events:PutEvents"
            Resource: !GetAtt BattleshiperPipelineEventBus.Arn
      Roles:
        - !Ref BattleshiperPipelineFuncRole
        - !Ref BattleshiperResourceFuncRole


  BattleshiperPipelineBuildComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: "battleshiper-pipeline-build-computer-environment"
      State: ENABLED
      Type: MANAGED
      ComputeResources:
        Type: FARGATE_SPOT
        AllocationStrategy: SPOT_PRICE_CAPACITY_OPTIMIZED # also called SCROOGE_MCDUCK_OPTIMIZED
        MaxvCpus: 20
        Subnets:
          - !Ref BattleshiperBuildSubnet1
          - !Ref BattleshiperBuildSubnet2
          - !Ref BattleshiperBuildSubnet3
      UpdatePolicy:
        JobExecutionTimeoutMinutes: 3

  BattleshiperPipelineBuildQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: "battleshiper-pipeline-build-queue"
      State: ENABLED
      Priority: 1
      JobStateTimeLimitActions:
        - Action: CANCEL
          State: RUNNABLE
          MaxTimeSeconds: 600 # the timeout is also set on each job definition (BUILD_JOB_TIMEOUT)
          Reason: "build job exceeded queue timeout"
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref BattleshiperPipelineBuildComputeEnvironment

  BattleshiperPipelineBuildQueuePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "battleshiper-pipeline-build-queue-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "batch:SubmitJob"
            Resource: !Ref BattleshiperPipelineBuildQueue


  BattleshiperPipelineInitFuncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "battleshiper-pipeline-init-cloudformation-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:CreateStack"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource: !GetAtt BattleshiperPipelineCloudformationServiceRole.Arn
      # further policies are defined as separate policy objects and attached to the IAM role.

  BattleshiperPipelineInitFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: pipeline/init
      Handler: init
      Runtime: provided.al2023
      Timeout: 600
      Architectures:
        - x86_64
      VpcConfig:
        SubnetIds:
          - !Ref BattleshiperPipelineSubnet1
          - !Ref BattleshiperPipelineSubnet2
          - !Ref BattleshiperPipelineSubnet3
        SecurityGroupIds:
          - !Ref BattleshiperDbReceiverGroup
          - !Ref BattleshiperPipelineEgressGroup
      Role: !GetAtt BattleshiperPipelineInitFuncRole.Arn
      Events:
        BuildEvent:
          Type: EventBridgeRule
          Properties:
            RuleName: "battleshiper-pipeline-init-rule"
            EventBusName: !Ref BattleshiperPipelineEventBus
            RetryPolicy:
              MaximumEventAgeInSeconds: 360
              MaximumRetryAttempts: 5
            Pattern:
              source:
                - "ch.megakuul.battleshiper"
              detail-type:
                - "battleshiper.init"
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          DATABASE_ENDPOINT: !GetAtt BattleshiperDb.ClusterEndpoint
          DATABASE_NAME: "battleshiper"
          DATABASE_SECRET_ARN: !Ref BattleshiperDbApiSecret
          TICKET_CREDENTIAL_ARN: !Ref BattleshiperPipelineTicketCredentials
          DEPLOYMENT_SERVICE_ROLE_ARN: !GetAtt BattleshiperPipelineCloudformationServiceRole.Arn
          DEPLOYMENT_TIMEOUT: "400s"
          STATIC_BUCKET_NAME: !Ref BattleshiperProjectStaticBucket
          BUILD_ASSET_BUCKET_NAME: !Ref BattleshiperProjectBuildAssetBucket
          EVENT_LOG_GROUP_PREFIX: "/battleshiper/project/event"
          BUILD_LOG_GROUP_PREFIX: "/battleshiper/project/build"
          DEPLOY_LOG_GROUP_PREFIX: "/battleshiper/project/deploy"
          SERVER_LOG_GROUP_PREFIX: "/battleshiper/project/server"
          LOG_GROUP_RETENTION_DAYS: 14
          BUILD_EVENTBUS_NAME: !Ref BattleshiperPipelineEventBus
          BUILD_EVENT_SOURCE: "ch.megakuul.battleshiper"
          BUILD_EVENT_ACTION: "battleshiper.build"
          BUILD_QUEUE_ARN: !Ref BattleshiperPipelineBuildQueue
          BUILD_QUEUE_POLICY_ARN: !Ref BattleshiperPipelineBuildQueuePolicy
          BUILD_JOB_TIMEOUT: "600s"
          BUILD_JOB_VCPUS: 1
          BUILD_JOB_MEMORY: 1024
      LoggingConfig:
        LogGroup: !Ref BattleshiperApiLogGroup 


  BattleshiperPipelineDeployFuncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "battleshiper-pipeline-deploy-cloudformation-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:GetTemplate"
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:DescribeChangeSet"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:DeleteChangeSet"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource: !GetAtt BattleshiperPipelineCloudformationServiceRole.Arn
      # Policies are defined as separate policy objects and attached to the IAM role.

  BattleshiperPipelineDeployFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: pipeline/deploy
      Handler: deploy
      Runtime: provided.al2023
      Timeout: 600
      Architectures:
        - x86_64
      VpcConfig:
        SubnetIds:
          - !Ref BattleshiperPipelineSubnet1
          - !Ref BattleshiperPipelineSubnet2
          - !Ref BattleshiperPipelineSubnet3
        SecurityGroupIds:
          - !Ref BattleshiperDbReceiverGroup
          - !Ref BattleshiperPipelineEgressGroup
      Role: !GetAtt BattleshiperPipelineDeployFuncRole.Arn
      Events:
        DeployEvent:
          Type: EventBridgeRule
          Properties:
            RuleName: "battleshiper-pipeline-deploy-rule"
            EventBusName: !Ref BattleshiperPipelineEventBus
            RetryPolicy:
              MaximumEventAgeInSeconds: 120
              MaximumRetryAttempts: 5
            Pattern:
              # Pattern accepts incomming batch events from the build queue
              # this behavior is specified here: https://docs.aws.amazon.com/batch/latest/userguide/batch_cwe_events.html
              source:
                - "aws.batch"
              detail:
                jobQueue: !Ref BattleshiperPipelineBuildQueue
                status:
                  - "SUCCEEDED"
                  - "FAILED"
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          DATABASE_ENDPOINT: !GetAtt BattleshiperDb.ClusterEndpoint
          DATABASE_NAME: "battleshiper"
          DATABASE_SECRET_ARN: !Ref BattleshiperDbApiSecret
          TICKET_CREDENTIAL_ARN: !Ref BattleshiperPipelineTicketCredentials
          DEPLOYMENT_TIMEOUT: "400s"
          CLOUDFRONT_CACHE_ARN: !GetAtt BattleshiperCDNRouteStore.Arn
      LoggingConfig:
        LogGroup: !Ref BattleshiperApiLogGroup 


  BattleshiperPipelineDeleteFuncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "battleshiper-pipeline-delete-cloudformation-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:DeleteStack"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource: !GetAtt BattleshiperPipelineCloudformationServiceRole.Arn
      # Policies are defined as separate policy objects and attached to the IAM role.

  BattleshiperPipelineDeleteFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: pipeline/delete
      Handler: delete
      Runtime: provided.al2023
      Architectures:
        - x86_64
      VpcConfig:
        SubnetIds:
          - !Ref BattleshiperPipelineSubnet1
          - !Ref BattleshiperPipelineSubnet2
          - !Ref BattleshiperPipelineSubnet3
        SecurityGroupIds:
          - !Ref BattleshiperDbReceiverGroup
          - !Ref BattleshiperPipelineEgressGroup
      Role: !GetAtt BattleshiperPipelineDeleteFuncRole.Arn
      Events:
        BuildEvent:
          Type: Schedule
          Properties:
            Name: "battleshiper-pipeline-delete-rule"
            Enabled: true
            Description: "schedules resource deletion of all projects marked as 'deleted'"
            Schedule: "rate(1 hour)"
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          DATABASE_ENDPOINT: !GetAtt BattleshiperDb.ClusterEndpoint
          DATABASE_NAME: "battleshiper"
          DATABASE_SECRET_ARN: !Ref BattleshiperDbApiSecret
      LoggingConfig:
        LogGroup: !Ref BattleshiperApiLogGroup 
          

Outputs:
  BattleshiperAPI:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/api"

  BattleshiperDbAdminSecret:
    Description: "Secret where the credentials of the database admin are stored"
    Value: !Ref BattleshiperDbAdminSecret