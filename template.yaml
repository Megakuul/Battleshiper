AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  bootstrap
  
  Sample SAM Template for bootstrap

Parameters:
  ApplicationDomain:
    Type: String
    Default: "battleshiper.megakuul.ch"
    Description: "Domain used for the battleshiper deployment."
  CognitoDomain:
    Type: String
    Default: "battleshiper"
    Description: "Domain prefix where the Battleshiper Cognito provider is hosted on."

Globals:
  Function:
    Timeout: 5

Resources:



  # Network

  BattleshiperVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.100.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true

  BattleshiperVPCInternetGateway:
    Type: AWS::EC2::InternetGateway

  BattleshiperVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref BattleshiperVPCInternetGateway
      VpcId: !Ref BattleshiperVPC
  
  BattleshiperApiSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BattleshiperVPC

  BattleshiperApiSubnetInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref BattleshiperApiSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref BattleshiperVPCInternetGateway
  
  BattleshiperApiSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperVPC
      CidrBlock: "10.100.10.0/24"
      AvailabilityZone: !Select [0, !Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperApiSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BattleshiperApiSubnet1
      RouteTableId: !Ref BattleshiperApiSubnetRouteTable

  BattleshiperApiSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperVPC
      CidrBlock: "10.100.20.0/24"
      AvailabilityZone: !Select [1, !Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperApiSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BattleshiperApiSubnet2
      RouteTableId: !Ref BattleshiperApiSubnetRouteTable

  BattleshiperApiSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperVPC
      CidrBlock: "10.100.30.0/24"
      AvailabilityZone: !Select [2, !Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperApiSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BattleshiperApiSubnet3
      RouteTableId: !Ref BattleshiperApiSubnetRouteTable

  BattleshiperDbSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperVPC
      CidrBlock: "10.100.110.0/24"
      AvailabilityZone: !Select [0, !Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperDbSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperVPC
      CidrBlock: "10.100.120.0/24"
      AvailabilityZone: !Select [1, !Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperDbSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperVPC
      CidrBlock: "10.100.130.0/24"
      AvailabilityZone: !Select [2, !Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperDbReceiverGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "battleshiper-db-receiver"
      GroupDescription: "Allows access to DocumentDB with group battleshiper-db-access"
      VpcId: !Ref BattleshiperVPC

  BattleshiperDbAccessGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "battleshiper-db-access"
      GroupDescription: "Allows DocumentDB access from battleshiper-db-receiver"
      VpcId: !Ref BattleshiperVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          DestinationSecurityGroupId: !GetAtt BattleshiperDbReceiverGroup.GroupId

  BattleshiperApiEgressGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "battleshiper-api-egress"
      GroupDescription: "Allows HTTPS egress traffic"
      VpcId: !Ref BattleshiperVPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0




  # Auth provider

  BattleshiperUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: "battleshiper-auth-pool"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      MfaConfiguration: OPTIONAL
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true

  BattleshiperUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Ref CognitoDomain
      UserPoolId: !Ref BattleshiperUserPool
  
  BattleshiperUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref BattleshiperUserPool
      ClientName: "battleshiper-auth-client"
      GenerateSecret: true
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - "code"
      AllowedOAuthScopes:
        - "openid"
        - "profile"
        - "email"
      CallbackURLs:
        - !Sub "https://${ApplicationDomain}/auth/callback"
      LogoutURLs:
        - !Sub "https://${ApplicationDomain}/auth/logout"



  # Database

  BattleshiperDbAdminSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "battleshiper-db-cluster-admin-credentials"
      Description: "Secret for battleshiper db administrator credentials."
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        PasswordLength: 60
        ExcludeCharacters: '"@/\\'

  BattleshiperDbApiSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "battleshiper-db-cluster-api-credentials"
      Description: "Secret for battleshiper api access credentials."
      GenerateSecretString:
        SecretStringTemplate: '{"username": "api"}'
        GenerateStringKey: "password"
        PasswordLength: 40
        ExcludeCharacters: '"@/\\'

  BattleshiperDbApiSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref BattleshiperDbApiSecret
      TargetId: !Ref BattleshiperDb
      TargetType: "AWS::DocDB::DBCluster"

  BattleshiperDbApiSecretPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "battleshiper-db-cluster-api-credentials-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource:
              - !Ref BattleshiperDbApiSecret
      Roles: 
        - !Ref BattleshiperUserFuncRole
        - !Ref BattleshiperAdminFuncRole
        - !Ref BattleshiperResourceFuncRole

  BattleshiperDb:
    Type: AWS::DocDBElastic::Cluster
    Properties:
      AdminUserName: !Sub '{{resolve:secretsmanager:BattleshiperDbAdminSecret:SecretString:username}}'
      # Admin password is set to the secret's ARN.
      # This usage is not documented unfortunaly: https://github.com/aws/aws-cdk/issues/28935.
      AdminUserPassword: !Ref BattleshiperDbAdminSecret
      AuthType: "SECRET_ARN"
      ClusterName: "battleshiper-db-cluster"
      ShardCapacity: 2
      ShardCount: 1
      ShardInstanceCount: 3
      SubnetIds: 
        - !Ref BattleshiperDbSubnet1
        - !Ref BattleshiperDbSubnet2
        - !Ref BattleshiperDbSubnet3
      VpcSecurityGroupIds:
        - !Ref BattleshiperDbAccessGroup


  # Api

  BattleshiperApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Prod

  BattleshiperAuthFuncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      # Policies are defined as separate policy objects and attached to the IAM role.

  BattleshiperAuthFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: api/auth
      Handler: auth
      Runtime: provided.al2023
      Architectures:
        - x86_64
      VpcConfig:
        SubnetIds:
          - !Ref BattleshiperApiSubnet1
          - !Ref BattleshiperApiSubnet2
          - !Ref BattleshiperApiSubnet3
        SecurityGroupIds:
          - !Ref BattleshiperApiEgressGroup
      Role: !GetAtt BattleshiperAuthFuncRole.Arn
      Events:
        Auth:
          Type: HttpApi
          Properties:
            Path: /api/auth/{proxy+}
            Method: ANY
            ApiId: !Ref BattleshiperApi
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          COGNITO_DOMAIN: !Sub "https://${BattleshiperUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
          CLIENT_ID: !Ref BattleshiperUserPoolClient
          CLIENT_SECRET: !GetAtt BattleshiperUserPoolClient.ClientSecret
          REDIRECT_URI: !Sub "https://${ApplicationDomain}/api/auth/callback"
          FRONTEND_REDIRECT_URI: "https://${ApplicationDomain}"

  BattleshiperUserFuncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      # Policies are defined as separate policy objects and attached to the IAM role.

  BattleshiperUserFunc:
    Type: AWS::Serverless::Function
    # Function must depend on policies attached to the role
    # as described in docs: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html 
    DependsOn: 
      - BattleshiperDbApiSecretPolicy
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: api/user
      Handler: user
      Runtime: provided.al2023
      Architectures:
        - x86_64
      VpcConfig:
        SubnetIds:
          - !Ref BattleshiperApiSubnet1
          - !Ref BattleshiperApiSubnet2
          - !Ref BattleshiperApiSubnet3
        SecurityGroupIds:
          - !Ref BattleshiperDbReceiverGroup
          - !Ref BattleshiperApiEgressGroup
      Role: !GetAtt BattleshiperUserFuncRole.Arn
      Events:
        Auth:
          Type: HttpApi
          Properties:
            Path: /api/user/{proxy+}
            Method: ANY
            ApiId: !Ref BattleshiperApi
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          COGNITO_DOMAIN: !Sub "https://${BattleshiperUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
          CLIENT_ID: !Ref BattleshiperUserPoolClient
          CLIENT_SECRET: !GetAtt BattleshiperUserPoolClient.ClientSecret
          DATABASE_ENDPOINT: !GetAtt BattleshiperDb.ClusterEndpoint
          DATABASE_NAME: "battleshiper"
          DATABASE_SECRET_ARN: !Ref BattleshiperDbApiSecret

  BattleshiperAdminFuncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      # Policies are defined as separate policy objects and attached to the IAM role.

  BattleshiperAdminFunc:
    Type: AWS::Serverless::Function
    # Function must depend on policies attached to the role
    # as described in docs: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html 
    DependsOn: 
      - BattleshiperDbApiSecretPolicy
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: api/admin
      Handler: admin
      Runtime: provided.al2023
      Architectures:
        - x86_64
      VpcConfig:
        SubnetIds:
          - !Ref BattleshiperApiSubnet1
          - !Ref BattleshiperApiSubnet2
          - !Ref BattleshiperApiSubnet3
        SecurityGroupIds:
          - !Ref BattleshiperDbReceiverGroup
          - !Ref BattleshiperApiEgressGroup
      Role: !GetAtt BattleshiperAdminFuncRole.Arn
      Events:
        Auth:
          Type: HttpApi
          Properties:
            Path: /api/admin/{proxy+}
            Method: ANY
            ApiId: !Ref BattleshiperApi
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          COGNITO_DOMAIN: !Sub "https://${BattleshiperUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
          CLIENT_ID: !Ref BattleshiperUserPoolClient
          CLIENT_SECRET: !GetAtt BattleshiperUserPoolClient.ClientSecret
          DATABASE_ENDPOINT: !GetAtt BattleshiperDb.ClusterEndpoint
          DATABASE_NAME: "battleshiper"
          DATABASE_SECRET_ARN: !Ref BattleshiperDbApiSecret

  BattleshiperResourceFuncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      # Policies are defined as separate policy objects and attached to the IAM role.

  BattleshiperResourceFunc:
    Type: AWS::Serverless::Function
    # Function must depend on policies attached to the role
    # as described in docs: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html 
    DependsOn: 
      - BattleshiperDbApiSecretPolicy
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: api/resource
      Handler: resource
      Runtime: provided.al2023
      Architectures:
        - x86_64
      VpcConfig:
        SubnetIds:
          - !Ref BattleshiperApiSubnet1
          - !Ref BattleshiperApiSubnet2
          - !Ref BattleshiperApiSubnet3
        SecurityGroupIds:
          - !Ref BattleshiperDbReceiverGroup
          - !Ref BattleshiperApiEgressGroup
      Role: !GetAtt BattleshiperResourceFuncRole.Arn
      Events:
        Auth:
          Type: HttpApi
          Properties:
            Path: /api/resource/{proxy+}
            Method: ANY
            ApiId: !Ref BattleshiperApi
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          COGNITO_DOMAIN: !Sub "https://${BattleshiperUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
          CLIENT_ID: !Ref BattleshiperUserPoolClient
          CLIENT_SECRET: !GetAtt BattleshiperUserPoolClient.ClientSecret
          DATABASE_ENDPOINT: !GetAtt BattleshiperDb.ClusterEndpoint
          DATABASE_NAME: "battleshiper"
          DATABASE_SECRET_ARN: !Ref BattleshiperDbApiSecret


  # S3 Storage bucket

  BattleshiperStaticBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: "Name"
          Value: "battleshiper-static-bucket"

  BattleshiperStaticBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BattleshiperStaticBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Resource:
              - !GetAtt BattleshiperStaticBucket.Arn
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                "AWS:SourceArn": 
                  - !TODO Cloudfront
                  - !TODO Cloudfront prerender

  BattleshiperStaticBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "battleshiper-static-bucket-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:PutObject"
            Effect: Allow
            Resource:
              - !GetAtt BattleshiperStaticBucket.Arn
      Roles: 
        - !Ref BattleshiperResourceFuncRole

  BattleshiperFunctionBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: "Name"
          Value: "battleshiper-function-bucket"
  
  BattleshiperFunctionBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "battleshiper-function-bucket-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:PutObject"
            Effect: Allow
            Resource:
              - !GetAtt BattleshiperFunctionBucket.Arn
      Roles:
        - !Ref BattleshiperResourceFuncRole


  # Certificate


  BattleshiperCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "*.${ApplicationDomain}"
      ValidationMethod: "DNS"
      DomainValidationOption:
        - DomainName: !Sub "*.${ApplicationDomain}"
          ValidationDomain: !Ref ApplicationDomain
          


  # Project API gateway



  # Cloudfront distributions

  BattleshiperCoreCDNRouteFunc:
    Type: AWS::CloudFront::Function
    Properties:
      Name: "battleshiper-core-cdn-route-func"
      AutoPublish: true
      FunctionConfig:
        Comment: Function to route core cdn requests to a path based on the requested host.
        Runtime: cloudfront-js-2.0
      FunctionCode: |
        
        function handler(event) {

        }

  BattleshiperCoreCDNOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: "battleshiper-core-cdn-origin-access"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  BattleshiperCoreCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        PriceClass: "PriceClass_All"
        ViewerCertificate:
          AcmCertificateArn: !Ref BattleshiperCertificate
          SslSupportMethod: "sni-only"
          MinimumProtocolVersion: "TLSv1.2_2021"
        Origins:
          - Id: "battleshiper-static-bucket"
            DomainName: !GetAtt BattleshiperStaticBucket.DomainName
            OriginAccessControlId: !GetAtt BattleshiperCoreCDNOriginAccessControl.Id
            S3OriginConfig: {}
          - Id: "battleshiper-project-api-gateway"
            DomainName: !GetAtt BattleshiperProjectApiGateway.DistributionDomainName
            CustomOriginConfig:
              OriginProtocolPolicy: "https-only"
        DefaultCacheBehavior:
          TargetOriginId: "battleshiper-project-api-gateway"
          AllowedMethods:
            - GET
            - HEAD
            - POST
          ViewerProtocolPolicy: "redirect-to-https"
          Compress: true
          ViewerProtocolPolicy: redirect-to-https
          FunctionAssociations: !TODO
        CacheBehaviors:
          - PathPattern: "/_app/*"
            TargetOriginId: "battleshiper-static-bucket"
            AllowedMethods:
              - GET
              - HEAD
            CacheMethods:
              - GET
              - HEAD
            Compress: true
            ViewerProtocolPolicy: redirect-to-https
            FunctionAssociations: !TODO
          - PathPattern: "/*.*"
            TargetOriginId: "battleshiper-static-bucket"
            AllowedMethods:
              - GET
              - HEAD
            CacheMethods:
              - GET
              - HEAD
            Compress: true
            ViewerProtocolPolicy: redirect-to-https
            FunctionAssociations: !TODO
        Aliases:
          - !Sub "*.${ApplicationDomain}"
      Tags:
        - Key: "Name"
          Value: "battleshiper-core-cdn"


  BattleshiperPrerenderCDNOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: "battleshiper-prerender-cdn-origin-access"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  BattleshiperPrerenderCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        PriceClass: "PriceClass_All"
        ViewerCertificate:
          AcmCertificateArn: !Ref BattleshiperCertificate
          SslSupportMethod: "sni-only"
          MinimumProtocolVersion: "TLSv1.2_2021"
        Origins:
          - Id: "battleshiper-static-bucket"
            DomainName: !GetAtt BattleshiperStaticBucket.DomainName
            OriginAccessControlId: !GetAtt BattleshiperPrerenderCDNOriginAccessControl.Id
            S3OriginConfig: {}
        DefaultCacheBehavior:
          TargetOriginId: "battleshiper-static-bucket"
          AllowedMethods:
            - GET
            - HEAD
          ViewerProtocolPolicy: redirect-to-https
        Aliases:
          - !Sub "prerender.${ApplicationDomain}"
      Tags:
        - Key: "Name"
          Value: "battleshiper-prerender-cdn"

Outputs:
  BattleshiperAPI:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/api"

  BattleshiperDbAdminSecret:
    Description: "Secret where the credentials of the database admin are stored"
    Value: !Ref BattleshiperDbAdminSecret

  CertificateDomainValidation:
    Description: "Domain options to validate the certificate via DNS."
    Value: !Join
      - "\n"
      - - !GetAtt BattleshiperCertificate.DomainValidationOptions[0].ResourceRecord.Name
      - - !GetAtt BattleshiperCertificate.DomainValidationOptions[0].ResourceRecord.Type
      - - !GetAtt BattleshiperCertificate.DomainValidationOptions[0].ResourceRecord.Value