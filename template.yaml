AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  bootstrap
  
  Sample SAM Template for bootstrap

Parameters:
  ApplicationDomain:
    Type: String
    Default: "https://battleshiper.megakuul.ch"
    Description: "Domain where the Battleshiper API is accessed by the end users."
  CognitoDomain:
    Type: String
    Default: "battleshiper"
    Description: "Domain prefix where the Battleshiper Cognito provider is hosted on."

Globals:
  Function:
    Timeout: 5

Resources:

  BattleshiperVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.100.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true

  BattleshiperVPCInternetGateway:
    Type: AWS::EC2::InternetGateway

  BattleshiperVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref BattleshiperVPCInternetGateway
      VpcId: !Ref BattleshiperVPC
  
  BattleshiperApiSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BattleshiperVPC

  BattleshiperApiSubnetInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref BattleshiperApiSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref BattleshiperVPCInternetGateway
  
  BattleshiperApiSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperVPC
      CidrBlock: "10.100.10.0/24"
      AvailabilityZone: !Select [0, !Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperApiSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BattleshiperApiSubnet1
      RouteTableId: !Ref BattleshiperApiSubnetRouteTable

  BattleshiperApiSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperVPC
      CidrBlock: "10.100.20.0/24"
      AvailabilityZone: !Select [1, !Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperApiSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BattleshiperApiSubnet2
      RouteTableId: !Ref BattleshiperApiSubnetRouteTable

  BattleshiperDbSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperVPC
      CidrBlock: "10.100.110.0/24"
      AvailabilityZone: !Select [0, !Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperDbSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BattleshiperVPC
      CidrBlock: "10.100.120.0/24"
      AvailabilityZone: !Select [1, !Fn::GetAZs !Ref "AWS::Region"]

  BattleshiperUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: "battleshiper-auth-pool"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      MfaConfiguration: OPTIONAL
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true

  BattleshiperUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Ref CognitoDomain
      UserPoolId: !Ref BattleshiperUserPool
  
  BattleshiperUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref BattleshiperUserPool
      ClientName: "battleshiper-auth-client"
      GenerateSecret: true
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - "code"
      AllowedOAuthScopes:
        - "openid"
        - "profile"
        - "email"
      CallbackURLs:
        - !Sub "${ApplicationDomain}/auth/callback"
      LogoutURLs:
        - !Sub "${ApplicationDomain}/auth/logout"

  BattleshiperApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Prod

  BattleshiperAuthFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: api/auth
      Handler: auth
      Runtime: provided.al2023
      Architectures:
        - x86_64
      VpcConfig:
        SubnetIds:
          - !Ref BattleshiperApiSubnet1
          - !Ref BattleshiperApiSubnet2
        SecurityGroupIds:
          - !Ref 
      Events:
        Auth:
          Type: HttpApi
          Properties:
            Path: /api/auth/{proxy+}
            Method: ANY
            ApiId: !Ref BattleshiperApi
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          COGNITO_DOMAIN: !Sub "https://${BattleshiperUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
          CLIENT_ID: !Ref BattleshiperUserPoolClient
          CLIENT_SECRET: !GetAtt BattleshiperUserPoolClient.ClientSecret
          REDIRECT_URI: !Sub "${ApplicationDomain}/api/auth/callback"
          FRONTEND_REDIRECT_URI: "${ApplicationDomain}"

  BattleshiperUserFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: api/user
      Handler: user
      Runtime: provided.al2023
      Architectures:
        - x86_64
      VpcConfig:
        SubnetIds:
          - !Ref BattleshiperApiSubnet1
          - !Ref BattleshiperApiSubnet2
        SecurityGroupIds:
          - !Ref 
      Events:
        Auth:
          Type: HttpApi
          Properties:
            Path: /api/user/{proxy+}
            Method: ANY
            ApiId: !Ref BattleshiperApi
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          COGNITO_DOMAIN: !Sub "https://${BattleshiperUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
          CLIENT_ID: !Ref BattleshiperUserPoolClient
          CLIENT_SECRET: !GetAtt BattleshiperUserPoolClient.ClientSecret




Outputs:
  BattleshiperAPI:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/api"
